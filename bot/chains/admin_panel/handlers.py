import hashlib
import os

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import User as TgUser

from bot.chains.admin_panel.kb import admin_start_kb, cancel_kb
from bot.chains.admin_panel.state import AdminPanel
from bot.config import ADMIN_CHAT_ID
from bot.core import dp, bot
from db import Event
from db.config import BASE_DIR
from db.models.user import User
from presentation.presentation_creator import create_presentation


@dp.callback_query_handler(lambda x: x.data == 'cancel_activity', state='*')
async def cancel(c: types.CallbackQuery, state: FSMContext):
    await c.message.delete_reply_markup()
    await state.finish()
    await bot.send_message(c.from_user.id, '–°–∫–∞—Å–æ–≤–∞–Ω–æ', reply_markup=admin_start_kb)
    await c.answer('–°–∫–∞—Å–æ–≤–∞–Ω–æ')


@dp.message_handler(regexp='–ó–∞–ª–æ–≥—ñ–Ω–∏—Ç–∏—Å—è —è–∫ –∞–¥–º—ñ–Ω üòé', state='*')
async def admin_start(msg: types.Message, state: FSMContext):
    if TgUser.get_current().id != int(ADMIN_CHAT_ID):
        await msg.answer("–¢–æ–±—ñ —Å—é–¥–∏ –Ω–µ –º–æ–∂–Ω–∞, –¥—Ä—É–∂–µ.")
    else:
        await msg.answer('–í—ñ—Ç–∞—é, –º—ñ–π –≥–æ—Å–ø–æ–¥–∞—Ä! \n\n –°–∫–∞–∂–∏, —â–æ —è –º–æ–∂—É –¥–ª—è —Ç–µ–±–µ –∑—Ä–æ–±–∏—Ç–∏.', reply_markup=admin_start_kb)


@dp.callback_query_handler(lambda x: x.data == 'user_creation', state='*')
async def name_head(c: types.CallbackQuery, state: FSMContext):
    await c.message.delete_reply_markup()
    await AdminPanel.wait_name.set()
    answer = await bot.send_message(c.from_user.id, "–ù–∞–ø–∏—à–∏ –ü–Ü–ë —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–æ–≥–æ –¥–µ–∫–∞–Ω–∞, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞ –∞–±–æ —Ä–µ–∫—Ç–æ—Ä–∞.",
                                    reply_markup=cancel_kb)
    await state.update_data({'message': answer})


@dp.message_handler(state=AdminPanel.wait_name)
async def faculty_head(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    await data.get('message').delete_reply_markup()
    answer = await msg.answer(f"–ù–∞–ø–∏—à—ñ—Ç—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∞–±–æ —ñ–Ω—Å—Ç–∏—Ç—É—Ç, –≥–æ–ª–æ–≤–æ—é –û–°–° —è–∫–æ–≥–æ —î {msg.text}. \n\n"
                              f"–Ø–∫—â–æ —Ü–µ —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–∏–π —Ä–µ–∫—Ç–æ—Ä - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à—ñ—Ç—å '–°—Ç—É–¥—Ä–µ–∫—Ç–æ—Ä–∞—Ç'",
                              reply_markup=cancel_kb)
    await state.update_data({'name': msg.text,
                             'message': answer})
    await AdminPanel.wait_faculty.set()


@dp.message_handler(state=AdminPanel.wait_faculty)
async def password_head(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    await data.get('message').delete_reply_markup()
    answer = await msg.answer("–í–∏–≥–∞–¥–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", reply_markup=cancel_kb)
    await state.update_data({'faculty': msg.text,
                             'message': answer})
    await AdminPanel.wait_password.set()


@dp.message_handler(state=AdminPanel.wait_password)
async def creating_user(msg: types.Message, state: FSMContext):
    await state.update_data({'password': msg.text})
    data = await state.get_data()
    await data.get('message').delete_reply_markup()
    await User.create(name=data.get('name'),
                      faculty=data.get('faculty'),
                      password=hashlib.md5(data.get('password').encode("utf-8")).hexdigest()
                      )
    await msg.answer("–ú–æ–ª–æ–¥–µ—Ü—å! –Æ–∑–µ—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ. \n\n –ú–æ–∂–µ —â–µ —á–∏–º–æ—Å—å –¥–æ–ø–æ–º–æ–≥—Ç–∏?", reply_markup=admin_start_kb)
    await state.finish()


@dp.callback_query_handler(lambda x: x.data == 'user_delete', state='*')
async def delete_user_start(c: types.CallbackQuery, state: FSMContext):
    await c.message.delete_reply_markup()
    await AdminPanel.wait_name_delete.set()
    answer = await bot.send_message(c.from_user.id, "–ù–∞–ø–∏—à–∏ –ü–Ü–ë –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ç–∏ —Ö–æ—á–µ—à –≤–∏–ª—É—á–∏—Ç–∏.",
                                    reply_markup=cancel_kb)
    await state.update_data({'message': answer})


@dp.message_handler(state=AdminPanel.wait_name_delete)
async def deleting(msg: types.Message, state: FSMContext):
    await state.update_data({'name': msg.text})
    data = await state.get_data()
    await data.get('message').delete_reply_markup()
    await User.delete.where(User.name == data.get('name')).gino.first()
    await msg.answer("–®–∫–æ–¥–∞, —â–æ —Ç–∏ –≤–∏–¥–∞–ª–∏–≤ —é–∑–µ—Ä–∞. –ù–∞–ø–µ–≤–Ω–æ, —Ç–∞–∫ —Ç—Ä–µ–±–∞."
                     "\n\n –ú–æ–∂–µ —â–µ —á–∏–º–æ—Å—å –¥–æ–ø–æ–º–æ–≥—Ç–∏?", reply_markup=admin_start_kb)
    await state.finish()


@dp.callback_query_handler(lambda x: x.data == 'list_user', state='*')
async def get_list(c: types.CallbackQuery):
    users = await User.query.gino.all()
    message_pattern = [f'{users[i].id}. {users[i].name}, {users[i].faculty} \n' for i in range(len(users))]

    await bot.send_message(c.from_user.id, f'{"".join(message_pattern)}\n\n '
                                           f'–ß–∏ –º–æ–∂—É —â–µ —á–∏–º–æ—Å—å –¥–æ–ø–æ–º–æ–≥—Ç–∏?', reply_markup=admin_start_kb)
